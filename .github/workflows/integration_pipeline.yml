name: Integration (Automatic)

on:
  push:
    branches: [ main, release/**, develop-* ]
# pull_request:
#   types: [opened, synchronize, reopened]
#   branches: [main, release/**, develop-*]

jobs:
  # Code
  editorconfig-check:
    name: .editorconfig lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: editorconfig-checker/action-editorconfig-checker@v1

  markdown-lint:
    name: markdown lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npx markdownlint-cli **/*.md

  #Build
  build:
    needs: [ editorconfig-check, markdown-lint ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          mvn clean install -Dmaven.test.skip=true

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar
          if-no-files-found: error
          retention-days: 1

  # Build and push to registry
  push-to-registry:
    needs: [ editorconfig-check, markdown-lint , build ]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=sha,format=long

      - name: Download Build Artifacts
        uses: actions/download-artifact@v1
        with:
          name: jar-artifact
          path: target/

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:sha-${{ github.sha }}"
#          format: "table"
#          exit-code: "1"
#          ignore-unfixed: true
#          vuln-type: "os,library"
#          severity: "CRITICAL,HIGH"

  # Deploy
  deploy:
    needs: [push-to-registry]
    runs-on: ubuntu-latest
    outputs:
      service-url: ${{ steps.deploy-apprunner.outputs.service-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # The following command will update the kube config file with our cluster information.
      # It will use the credentials exported by the previous action.
      - name: Update KubeConfig
        shell: bash
        run: |
          aws eks update-kubeconfig --name carinfo-cluster --region=eu-west-1

      # Deploy newly built changes to EKS cluster.
      - name: Deploy To Cluster
        shell: bash
        run: |
          kubectl apply -f eks/deployment.yml
          kubectl apply -f eks/service.yml

#      - name: deploy to cluster
#          uses: kodermax/kubectl-aws-eks@master
#          env:
#            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
#            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#            ECR_REPOSITORY: my-app
#            IMAGE_TAG: ${{ github.sha }
#          with:
#            args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG




#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ steps.login-ecr.outputs.repository }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#      - name: Deploy to App Runner Image
#        id: deploy-apprunner
#        uses: awslabs/amazon-app-runner-deploy@main
#        with:
#          service: app-runner-git-deploy-service
#          image: ${{ steps.build-image.outputs.image }}
#          access-role-arn: ${{ secrets.ROLE_ARN }}
#          region: eu-west-1
#          cpu: 1
#          memory: 2
#          wait-for-service-stability: true
#          port: 5000
#
#      - name: App Runner output
#        run: echo "App runner output ${{ steps.deploy-apprunner.outputs.service-url }}"
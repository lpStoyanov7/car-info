name: Pipeline

on:
  push:
    branches: [ main, release/**, develop-* ]
# pull_request:
#   types: [opened, synchronize, reopened]
#   branches: [main, release/**, develop-*]

jobs:
  # Code
  editorconfig-check:
    name: .editorconfig lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: editorconfig-checker/action-editorconfig-checker@v1

  markdown-lint:
    name: markdown lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npx markdownlint-cli **/*.md

  check_db_scripts:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: jdbc:postgresql://postgres:5432/db
          user: user
          password: password

  #  unit_tests:
  #    name: Quality check
  #    runs-on: ubuntu-latest
  #    #    needs: [ editorconfig-check, markdown-lint ]
  #    needs: [ build ]
  #    permissions:
  #      id-token: write
  #      contents: read
  #      checks: write
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #        with:
  #          java-version: '11'
  #          distribution: 'adopt'
  #      - name: Maven test
  #        run: mvn -B test
  #      - name: Test Report
  #        uses: dorny/test-reporter@v1
  #        if: success() || failure()
  #        with:
  #          name: JUnit Tests
  #          path: target/surefire-reports/*.xml
  #          reporter: java-junit

  #  #  #Build
  #  build:
  #    #    needs: [ editorconfig-check, markdown-lint ]
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v3
  #      - name: Set up JDK 11
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: '11'
  #          distribution: 'adopt'
  #      - name: Build with Maven
  #        run: |
  #          mvn clean install -Dmaven.test.skip=true
  #
  #      - name: Upload JAR
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: jar-artifact
  #          path: target/*.jar
  #          if-no-files-found: error
  #          retention-days: 1

  #
  #
  #  # Build and push to registry
  #  push-to-registry:
  #    needs: [ build ]
  #    name: Push Docker image to Docker Hub
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Check out the repo
  #        uses: actions/checkout@v3
  #
  #      - name: Log in to Docker Hub
  #        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #        with:
  #          username: ${{ secrets.DOCKER_USERNAME }}
  #          password: ${{ secrets.DOCKER_PASSWORD }}
  #
  #      - name: Extract metadata (tags, labels) for Docker
  #        id: meta
  #        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #        with:
  #          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
  #          tags: |
  #            type=sha,format=long
  #
  #      - name: Download Build Artifacts
  #        uses: actions/download-artifact@v1
  #        with:
  #          name: jar-artifact
  #          path: target/
  #
  #      - name: Build and push Docker image
  #        uses: docker/build-push-action@v3
  #        with:
  #          context: .
  #          push: true
  #          tags: ${{ steps.meta.outputs.tags }}
  #          labels: ${{ steps.meta.outputs.labels }}
  #
  ##      - name: Run Trivy vulnerability scanner
  ##        uses: aquasecurity/trivy-action@master
  ##        with:
  ##          image-ref: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:sha-${{ github.sha }}"
  ##          format: "table"
  ##          exit-code: "1"
  ##          ignore-unfixed: true
  ##          vuln-type: "os,library"
  ##          severity: "CRITICAL,HIGH"
  #
  # Deploy
  #  deploy:
  #    #    needs: [ push-to-registry ]
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #        with:
  #          persist-credentials: false
  #
  #      - name: Configure AWS credentials
  #        id: aws-credentials
  #        uses: aws-actions/configure-aws-credentials@v1
  #        with:
  #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          aws-region: eu-west-1
  #
  ##      - uses: swdotcom/update-and-apply-kubernetes-configs@v1
  ##        with:
  ##          k8-config-file-paths: kubernetes/service.yml kubernetes/deployment.yml
  ##          replacement-method: list
  ##          env-replacement-list: |
  ##            IMAGE_KEY
  ##        env:
  ##          IMAGE_KEY: lpstoyanov/car-info:sha-74d1117ce158972aa3951fa88e016cb05ad024a8
  #
  #
  #      # The following command will update the kube config file with our cluster information.
  #      # It will use the credentials exported by the previous action.
  #      - name: Update KubeConfig
  #        shell: bash
  #        run: |
  #          aws eks update-kubeconfig --name carinfo-cluster --region=eu-west-1
  #
  #      # Deploy newly built changes to EKS cluster.
  #      - name: Deploy To Cluster
  #        shell: bash
  #        run: |
  #          kubectl apply -f kubernetes/deployment.yml
  #          kubectl apply -f kubernetes/service.yml

  webhook:
    needs: [ editorconfig-check, markdown-lint, check_db_scripts ]
    #    needs: [check_db_scripts]
    if: always()
    name: Sending MS Teams Notification
    runs-on: ubuntu-latest
    env:
      JOBS_STATUS: ${{ contains(needs.*.result, 'failure') && '"Failure"' || '"Success"' }}
      HAS_FAILURES: ${{ contains(needs.*.result, 'failure') }}
      OTHER: ${{ contains(needs.*.result, 'failure') && 'Failure' || 'Success' }}
    steps:
      - uses: actions/checkout@master
        #            overwrite: "{title: `Overwrote title in ${workflow_link}`}"
        #      - name: Microsoft Teams Failure Notification
        #        if: ${{ contains(needs.*.result, 'failure') }}
      - name: Jobs status

        run: |
          echo $JOBS_STATUS
          echo "Value of the variable3: $OTHER"

      #      - name: String manupulation
      #        run: |
      #        echo '{ "status": "${{ env.JOBS_STATUS }}" }'

      #        uses: actions/github-script@v3
      #        with:
      #          script: |
      #            core.setFailed('there is a failing job')

      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          #          job: ${{ format('{ "status" : {0}', $JOBS_STATUS) }}
          job: '{ "status": "Failure" }'
          steps: ${{ toJson(steps) }}

name: Integration (Automatic)

on:
  push:
    branches: [ main, release/**, develop-* ]
# pull_request:
#   types: [opened, synchronize, reopened]
#   branches: [main, release/**, develop-*]

jobs:
  # Code
#  editorconfig-check:
#    name: .editorconfig lint
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: editorconfig-checker/action-editorconfig-checker@v1
#
#  markdown-lint:
#    name: markdown lint
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - run: npx markdownlint-cli **/*.md

  unit_tests:
    name: Quality check
    runs-on: java-11
#    needs: [ editorconfig-check, markdown-lint ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Maven test
        run: mvn -B test
      - name: Test Report
        uses: dorny/test-reporter@0d00bb14cb0cc2c9b8985df6e81dd333188224e1
        if: success() || failure()
        with:
          name: JUnit Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

#  #Build
#  build:
#    needs: [ editorconfig-check, markdown-lint ]
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'adopt'
#      - name: Build with Maven
#        run: |
#          mvn clean install -Dmaven.test.skip=true
#
#      - name: Upload JAR
#        uses: actions/upload-artifact@v3
#        with:
#          name: jar-artifact
#          path: target/*.jar
#          if-no-files-found: error
#          retention-days: 1
#
#
#
#  # Build and push to registry
#  push-to-registry:
#    needs: [ build ]
#    name: Push Docker image to Docker Hub
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#        with:
#          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
#          tags: |
#            type=sha,format=long
#
#      - name: Download Build Artifacts
#        uses: actions/download-artifact@v1
#        with:
#          name: jar-artifact
#          path: target/
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
##      - name: Run Trivy vulnerability scanner
##        uses: aquasecurity/trivy-action@master
##        with:
##          image-ref: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:sha-${{ github.sha }}"
##          format: "table"
##          exit-code: "1"
##          ignore-unfixed: true
##          vuln-type: "os,library"
##          severity: "CRITICAL,HIGH"
#
#  # Deploy
#  deploy:
#    needs: [push-to-registry]
#    runs-on: ubuntu-latest
#    outputs:
#      service-url: ${{ steps.deploy-apprunner.outputs.service-url }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          persist-credentials: false
#
#      - name: Configure AWS credentials
#        id: aws-credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-west-1
#
#      # The following command will update the kube config file with our cluster information.
#      # It will use the credentials exported by the previous action.
#      - name: Update KubeConfig
#        shell: bash
#        run: |
#          aws eks update-kubeconfig --name carinfo-cluster --region=eu-west-1
#
#      # Deploy newly built changes to EKS cluster.
#      - name: Deploy To Cluster
#        shell: bash
#        run: |
#          kubectl apply -f eks/deployment.yml
#          kubectl apply -f eks/service.yml
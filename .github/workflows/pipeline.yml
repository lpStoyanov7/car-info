name: Pipeline

on:
  push:
    branches: [ main, release/**, develop-* ]
# pull_request:
#   types: [opened, synchronize, reopened]
#   branches: [main, release/**, develop-*]

jobs:
  # Code
  #  editorconfig-check:
  #    name: .editorconfig lint
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: editorconfig-checker/action-editorconfig-checker@v1
  #
  #  markdown-lint:
  #    name: markdown lint
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - run: npx markdownlint-cli **/*.md

  #  check_db_scripts:
  #    if: |
  #      jq -r '.pull_request.changed_files[] | select(endswith(".sql"))' $GITHUB_EVENT_PATH | grep -q .
  #    runs-on: ubuntu-latest
  #    services:
  #      postgres:
  #        image: postgres
  #        env:
  #          POSTGRES_DB: db
  #          POSTGRES_USER: user
  #          POSTGRES_PASSWORD: password
  #        options: >-
  #          --health-cmd pg_isready
  #          --health-interval 10s
  #          --health-timeout 5s
  #          --health-retries 5
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: joshuaavalon/flyway-action@v3.0.0
  #        with:
  #          url: jdbc:postgresql://postgres:5432/db
  #          user: user
  #          password: password

  #  unit_tests:
  #    name: Quality check
  #    runs-on: ubuntu-latest
  #    #    needs: [ editorconfig-check, markdown-lint ]
  #    needs: [ build ]
  #    permissions:
  #      id-token: write
  #      contents: read
  #      checks: write
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #        with:
  #          java-version: '11'
  #          distribution: 'adopt'
  #      - name: Maven test
  #        run: mvn -B test
  #      - name: Test Report
  #        uses: dorny/test-reporter@v1
  #        if: success() || failure()
  #        with:
  #          name: JUnit Tests
  #          path: target/surefire-reports/*.xml
  #          reporter: java-junit



  preparation:
    name: Preparation
    runs-on: ubuntu-latest
    outputs:
      stage: ${{ steps.branch-check.outputs.stage }}
      node: ${{ steps.node-select.outputs.value }}
      replica-count: ${{ steps.replica-count.outputs.value }}
    steps:
      - name: Set stage by branch
        id: branch-check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "stage=prd" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/release" ]; then
            echo "stage=qas" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "stage=dev" >> $GITHUB_OUTPUT
          else
            echo "stage=none" >> $GITHUB_OUTPUT
          fi
      - name: Evaluate number of replicas
        uses: haya14busa/action-cond@v1
        id: replica-count
        with:
          cond: ${{ steps.branch_check.outputs.stage == 'prd' }}
          if_true: 2
          if_false: 1
      - name: Select node
        uses: haya14busa/action-cond@v1
        id: node-select
        with:
          cond: ${{ steps.branch_check.outputs.stage == 'prd' }}
          if_true: prd
          if_false: dev
      - name: Print stage with replicas count
        run: |
          echo "Stage for branch '${{ github.ref }}' \
          is '${{ steps.branch_check.outputs.stage }}' with '${{ steps.replica-count.outputs.value }}' replicas
          echo "Selecting node '${{ steps.node-select.outputs.value }}'

  #  #  #Build
  build:
    #    needs: [ editorconfig-check, markdown-lint ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          mvn clean install -Dmaven.test.skip=true

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar
          if-no-files-found: error
          retention-days: 1

  #
  #
  #  # Build and push to registry
  push-to-registry:
    needs: [ build, preparation ]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      image-url: ${{ steps.image-url.outputs.image-url }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=sha,format=long
      - name: Download Build Artifacts
        uses: actions/download-artifact@v1
        with:
          name: jar-artifact
          path: target/
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Output image url
        id: image-url
        env:
          DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          GIT_SHA: ${{ github.sha }}
        run: |
          echo "image-url=${{ format ('{0}/{1}:sha-{2}', secrets.DOCKER_NAMESPACE, secrets.DOCKER_REPOSITORY, github.sha) }}" >> $GITHUB_OUTPUT

  #      - name: Run Trivy vulnerability scanner
  #        uses: aquasecurity/trivy-action@master
  #        with:
  #          image-ref: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:sha-${{ github.sha }}"
  #          format: "table"
  #          exit-code: "1"
  #          ignore-unfixed: true
  #          vuln-type: "os,library"
  #          severity: "CRITICAL,HIGH"
  #
  # Deploy
  deploy:
    needs: [ push-to-registry, preparation ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Print image url
        run: echo "${{ needs.push-to-registry.outputs.image-url }}"

        # The following command will update the kube config file with our cluster information.
        # It will use the credentials exported by the previous action.
      - name: Update KubeConfig
        shell: bash
        run: |
          aws eks update-kubeconfig --name carinfo-cluster --region=eu-west-1
      - name: Edit kuberetes files
        run: |
          sed -i -e "s/\${IMAGE}/${{ needs.push-to-registry.outputs.image-url }}/g" \
          -e "s/\${STAGE}/${{ needs.preparation.outputs.stage }}/g" \
          -e "s/\${REPLICAS}/${{ needs.preparation.outputs.replica-count }}/g" \
          -e "s/\${NODE}/${{ needs.preparation.outputs.node }}/g" kubernetes/*.yml
      # Deploy newly built changes to EKS cluster.
      - name: Deploy To Cluster
        shell: bash
        run: |
          kubectl -n ${{ needs.preparation.outputs.stage }} apply -f kubernetes/deployment.yml
          kubectl -n ${{ needs.preparation.outputs.stage }} apply -f kubernetes/service.yml

#  webhook:
#    needs: [ editorconfig-check, markdown-lint ]
#    if: always()
#    name: Sending MS Teams Notification
#    runs-on: ubuntu-latest
#    steps:
#      - name: Determine the status of the whole pipeline
#        uses: haya14busa/action-cond@v1
#        id: status
#        with:
#          # We check here if there is any job that is failing
#          cond: ${{ contains(needs.*.result, 'failure') }}
#          # skitionek/notify-microsoft-teams@master action expects Json object for the job context
#          if_true: '{ "status": "Failure" }'
#          if_false: '{ "status": "Success" }'
#      - name: Microsoft Teams Notification
#        uses: skitionek/notify-microsoft-teams@master
#        if: always()
#        with:
#          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
#          needs: ${{ toJson(needs) }}
#          job: ${{ steps.status.outputs.value }}
#          steps: ${{ toJson(steps) }}
